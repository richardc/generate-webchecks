#!/usr/bin/perl

package Types;
use Moose::Util::TypeConstraints;

subtype 'StrList'
  => as 'ArrayRef[Str]';
coerce  'StrList'
  => from 'Str' => via { [ split /[, ]+/ ] };
no Moose::Util::TypeConstraints;


package Check;
use Moose;

has 'name'    => ( is => 'rw', isa => 'Str', required => 1 );
has 'command' => ( is => 'rw', isa => 'Str', required => 1 );
has 'group' => (
    is       => 'rw',
    isa      => 'StrList',
    coerce   => 1,
    required => 1,
);
__PACKAGE__->meta->make_immutable;
no Moose;

sub hosts {
    my $self = shift;
    return [ map { @{ $_->hosts } } @{ $self->group } ];
}

package Group;
use Moose;
has 'name' => ( is => 'rw', isa => 'Str', required => 1 );
has hosts => (
    is       => 'rw',
    isa      => 'StrList',
    coerce   => 1,
    required => 1,
);

__PACKAGE__->meta->make_immutable;
no Moose;


package main;

use strict;
use warnings;
use Config::Tiny;
use YAML;
use Getopt::Long;
use File::Basename;
use Template;

GetOptions(
  "c|config=s"   => \( my $configfile = 'webchecks.ini' ),
  "d|debug"      => \( my $debug = 0 ),
  "t|template=s" => \( my $template = 'nagios-webchecks.tt'),
);

my $config = get_configs();

my $tt = Template->new();

$tt->process( $template, { checks => [ values %{ $config->{checks} } ],
    sprintf => \&my_sprintf } )
  || die $tt->error();

#####################################################

sub my_sprintf {
   my ($format, @args) = @_;
   return sprintf $format, @args;
}

sub get_configs {
  my $config = Config::Tiny->new();
  $config = Config::Tiny->read( $configfile )
    || die "Failed to open [$configfile]: $Config::Tiny::errstr\n";

  print Dump $config if $debug;
  my %parsed;

  for my $group ( sort grep { /^group::/ } keys %$config ) {
      $group =~ m{^group::(.*)};
      my $obj = Group->new( { %{ $config->{$group} }, name => $1 } );
      $parsed{group}{ $obj->name } = $obj;
  }
  for my $name ( sort grep { /^check::/ } keys %$config ) {
    $name =~ m{^check::(.*)};
    my $check = Check->new( { %{ $config->{$name} }, name => $1 } );
    $parsed{check}{ $check->name } = $check;
  }
  
  
  print Dump \%parsed if $debug;
  return \%parsed;
}



